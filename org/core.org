#+title: OpenACS on Ubuntu.
* Auxiliary Information                                            :noexport:
:PROPERTIES:
:CUSTOM_ID: auxiliary-information
:END:
The setupfile contain global common property configuration:
#+SETUPFILE: .configuration/global_vars_org.setup
#+SETUPFILE: .configuration/global_property_org.setup
#+SETUPFILE: .configuration/global_vars_html.setup
#+EXPORT_FILE_NAME: ../Readme
#+OPTIONS: auto-id:t

* About
:PROPERTIES:
:CUSTOM_ID: about
:END:
This is [[https://openacs.org/][OpenACS]] on [[https://hub.docker.com/_/ubuntu][Ubuntu base docker image]] (version 22.04) .  To install OpenACS I used  code from  [[https://github.com/gustafn/install-ns][Gustaf Neumann]] script [[https://github.com/gustafn/install-ns/blob/master/install-oacs.sh][install-oacs.sh]]. The base image is [[https://hub.docker.com/r/oupfiz5/openacs][oupfiz5/openacs]]

OpenACS is self-hosting at https://chiselapp.com/user/oupfiz5/repository/openacs.

If you are reading this on GitHub, then you are looking at a Git mirror of the self-hosting OpenACS repository.  The purpose of that mirror is to test and exercise Fossil's ability to export a Git mirror and using GitHub CI/CD  (GitHub Actions). Nobody much uses the GitHub mirror, except to verify that the mirror logic works. If you want to know more about OpenACS, visit the official self-hosting site linked above.
* Table of Contents :TOC_3:noexport:
:PROPERTIES:
:CUSTOM_ID: table-of-contents
:END:
- [[#about][About]]
- [[#prerequisite][Prerequisite]]
  - [[#tools][Tools]]
  - [[#third-party-tools][Third party tools]]
- [[#installation][Installation]]
  - [[#build-from-chiselapp-fossil][Build from chiselapp (fossil)]]
  - [[#download-from-dockerhub][Download from DockerHub]]
  - [[#build-from-github][Build from GitHub]]
  - [[#contfiguration][Contfiguration]]
    - [[#build-arguments][Build arguments]]
    - [[#example-of-build][Example of build]]
- [[#quickstart][Quickstart]]
  - [[#manage-openacs-using-docker-compose][Manage OpenACS using docker-compose]]
    - [[#prerequisite-1][Prerequisite]]
    - [[#startstop-interactive][Start/stop interactive]]
    - [[#startstopremove-as-daemon][Start/stop/remove as daemon]]
    - [[#view-logs][View logs]]
    - [[#view-list-containers][View list containers]]
    - [[#prune-all][Prune all]]
- [[#configuration-options][Configuration options]]
  - [[#general-options][General options]]
  - [[#oacs_-variables][oacs_* variables]]
  - [[#openacs-listen-port][OpenACS listen port]]
  - [[#openacs-docker-image][OpenACS docker image]]
  - [[#naviserver-configuration-file][NaviServer configuration file]]
  - [[#postgresql-docker-image][PostgreSQL docker image]]
  - [[#database-hostname][Database hostname]]
  - [[#database-name][Database name]]
  - [[#database-username][Database username]]
  - [[#database-password][Database password]]
  - [[#postgres-tag][Postgres tag]]
  - [[#timezone][Timezone]]
- [[#cicd][CI/CD]]
- [[#maintenance][Maintenance]]
  - [[#shell-access][Shell access]]

* Prerequisite
:PROPERTIES:
:CUSTOM_ID: prerequisite
:END:
** Tools
:PROPERTIES:
:CUSTOM_ID: tools
:END:
1. *nix operation system
2. Install Docker
3. Install git (optional)
4. Install fossil (optional)
** Third party tools
:PROPERTIES:
:CUSTOM_ID: third-party-tools
:END:
They are using for testing and scanning:
1. [[https://github.com/bats-core][Bats]]
2. [[https://www.shellcheck.net/][Shellcheck]]
3. [[https://github.com/hadolint/hadolint][Hadolynt]]
4. [[https://github.com/goodwithtech/dockle][Dockle]]
5. Snyk - not necessarily
6. Trivy - not necessarily
* Installation
:PROPERTIES:
:CUSTOM_ID: installation
:END:

** Build from chiselapp (fossil)
:PROPERTIES:
:CUSTOM_ID: build-from-chiselapp--fossil-
:END:
#+begin_src sh :tangle no :noweb yes
  fossil clone https://chiselapp.com/user/oupfiz5/repository/openacs openacs.fossil
  mkdir openacs
  cd openacs
  fossil open ../openacs.fossil
  docker build -t oupfiz5/openacs -f ./Dockerfile .
#+end_src

** Download from DockerHub
:PROPERTIES:
:CUSTOM_ID: download-from-dockerhub
:END:
You can download docker images from dockerhub:
#+begin_src sh :tangle no :noweb yes
  docker pull oupfiz5/openacs:oacs-5-10
#+end_src

** Build from GitHub
:PROPERTIES:
:CUSTOM_ID: build-from-github
:END:
#+begin_src sh :tangle no :noweb yes
  git clone https://github.com/oupfiz5/openacs.git
  cd openacs
  docker build -t oupfiz5/openacs -f ./Dockerfile .
#+end_src

** Contfiguration
:PROPERTIES:
:CUSTOM_ID: contfiguration
:END:
*** Build arguments
:PROPERTIES:
:CUSTOM_ID: build-arguments
:END:
 |---------------------+-----------------------+---------------------------|
 | Arguments           | Default               | Description               |
 |---------------------+-----------------------+---------------------------|
 | BUILD_DATE          | none                  | Set build date for label  |
 |---------------------+-----------------------+---------------------------|
 | OACS_TAG            | oacs-5-10             | Set OpenACS version       |
 |---------------------+-----------------------+---------------------------|
 | NS_IMAGE_TAG        | 4.99.24               | Set NaviServer version    |
 |---------------------+-----------------------+---------------------------|
 | NS_IMAGE_REPOSITORY | oupfiz5               | Set NaviServer repository |
 |---------------------+-----------------------+---------------------------|
 | NS_IMAGE_NAME       | naviserver            | Set NaviServer image name |
 |---------------------+-----------------------+---------------------------|
 | IMAGE_NAME          | openacs               | Set OpenaACS image name   |
 |---------------------+-----------------------+---------------------------|
 | IMAGE_REPOSITORY    | oupfiz5               | Set OpenACS repository    |
 |---------------------+-----------------------+---------------------------|
 | IMAGE_TAG           | oacs-5-10             | Set OpenACS image tag     |
 |---------------------+-----------------------+---------------------------|
*** Example of build
:PROPERTIES:
:CUSTOM_ID: example-of-build
:END:

#+begin_src sh :tangle no :noweb yes :dir ../src
set -a; source ../VERSIONS ; set +a;
IMAGE="${IMAGE:-${IMAGE_REPOSITORY}/${IMAGE_NAME}:${IMAGE_TAG}}"
docker build --no-cache \
    --build-arg BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
    --build-arg OACS_TAG="oacs-5-10" \
    -t "${IMAGE}" \
    -f ./Dockerfile \
    .
#+end_src

* Quickstart
:PROPERTIES:
:CUSTOM_ID: quickstart
:END:
** Manage OpenACS using docker-compose
:PROPERTIES:
:CUSTOM_ID: manage-openacs-using-docker-compose
:END:
*** Prerequisite
:PROPERTIES:
:CUSTOM_ID: prerequisite
:END:
Clone repository from:
- fossil:
  #+begin_src sh :tangle no :noweb yes
fossil clone https://chiselapp.com/user/oupfiz5/repository/openacs openacs.fossil
mkdir openacs
cd openacs
fossil open ../openacs.fossil
  #+end_src

- GitHub:
  #+begin_src sh :tangle no :noweb yes
git clone https://github.com/oupfiz5/openacs.git
cd openacs
  #+end_src
*** Start/stop interactive
:PROPERTIES:
:CUSTOM_ID: start-stop-interactive
:END:
start:
#+begin_src sh :tangle no :noweb yes :dir ../src/
docker-compose up
#+end_src

The site will be accessible by url  http://localhost:8080.

stop:
#+begin_example
<Ctrl>+C
#+end_example

*** Start/stop/remove as daemon
:PROPERTIES:
:CUSTOM_ID: start-stop-remove-as-daemon
:END:
start :
#+begin_src sh :tangle no :noweb yes :dir ../src/
docker-compose up -d
#+end_src

The site will be accessible by url  http://localhost:8080.

stop:
#+begin_src sh :tangle no :noweb yes :dir ../src/
docker-compose down
#+end_src

remove:
#+begin_src sh :tangle no :noweb yes :dir ../src/
docker-compose rm
#+end_src

*** View logs
:PROPERTIES:
:CUSTOM_ID: view-logs
:END:
Logs follow:
#+begin_src sh :tangle no :noweb yes :dir ../src/
docker-compose logs -f
#+end_src

Logs tail:
#+begin_src sh :tangle no :noweb yes :dir ../src/
docker-compose logs --tail=10
#+end_src
*** View list containers
:PROPERTIES:
:CUSTOM_ID: view-list-containers
:END:
#+begin_src sh :tangle no :noweb yes :dir ../src/
docker-compose ps
#+end_src

*** Prune all
:PROPERTIES:
:CUSTOM_ID: prune-all
:END:
#+begin_src sh :tangle no :noweb yes :dir ../src/
docker system prune --volumes --force
#+end_src

* Configuration options
:PROPERTIES:
:CUSTOM_ID: configuration-options
:END:
** General options
:PROPERTIES:
:CUSTOM_ID: general-options
:END:
|---------------------+--------------------+-------------------------------------------|
| Option              | Default            | Description                               |
|---------------------+--------------------+-------------------------------------------|
| NS_CONF             | openacs-config.tcl | Full path to configuration file           |
| oacs_db_host*       | ${PGHOST}          | Set database host for OpenACS             |
| oacs_db_name*       | ${PGDATABASE}      | Set database name for OpenACS             |
| oacs_db_passwod*    | ${PGPASSWORD}      | Set db user password for OpenACS          |
| oacs_db_port*       | ${PGPORT}          | Set database port for OpenACS             |
| oacs_db_user*       | ${PGUSER}          | Set database user for OpenACS             |
| oacs_httpport*      | 8000               | Set listen port for OpenACS               |
| OACS_IMAGE_NAME     | openacs            | Set OpenACS image name                    |
| OACS_IMAGE_TAG      | oacs-5-10          | Set OpenACS image tag                     |
| oacs_ipaddress*     | 0.0.0.0            | Set listen address for OpenACS            |
| OACS_LISTEN_PORT    | 8080               | Set http listen port, example 8080        |
| OACS_REPOSITORY     | oupfiz5            | Set OpenACS repository name               |
| PGDATABASE          | openacs            | Database name                             |
| PGHOST              | postgres           | Database host name                        |
| PGPASWORD           | testing            | Database user password                    |
| PGPORT              | 5432               | Database port                             |
| PGUSER              | openacs            | Database user name                        |
| POSTGRES_DB         | ${PGDATABASE}      | Set postgres db name for docker image     |
| POSTGRES_PASSWORD   | ${PGPASSWORD}      | Set postgres db password for docker image |
| POSTGRES_USER       | ${PGUSER}          | Set postgres db user for docker image     |
| POSTGRES_REPOSITORY | postgres           | Set default postgres repository           |
| POSTGRES_TAG        | 14.1-alpine        | Set default postgres tag                  |
| TZ                  | UTC                | Set timezone, example Europe/Moscow       |
|---------------------+--------------------+-------------------------------------------|
 * setting these variables as environment variables with the "oacs_" prefix (suitable for e.g. docker setups for =defaultConfig= in NS_CONF ([[https://bitbucket.org/naviserver/naviserver/commits/f9a919f8cb39fdf3b25fac67f5fde69f27c2a83a][see naviserver commit]]).

All options have predifined values and store in file =.env= .

** oacs_* variables
:PROPERTIES:
:CUSTOM_ID: oacs---variables
:END:
Setting these variables as environment variables with the "oacs_" prefix (suitable for e.g. docker setups for =defaultConfig= in NS_CONF ([[https://bitbucket.org/naviserver/naviserver/commits/f9a919f8cb39fdf3b25fac67f5fde69f27c2a83a][see naviserver commit]]).
Code example from NaviServer configuration file is:
#+begin_src tcl :tangle no :noweb yes
...
# All default variables in defaultConfig can be overloaded by
# 1) setting these variables in this file (highest precedence)
# 2) setting these variables as environment variables with
#    the "oacs_" prefix (suitable for e.g. docker setups)
# 3) set the variables from the default values.
#
set defaultConfig {
    hostname	localhost
    ipaddress	127.0.0.1
    httpport	8000
    httpsport	""

    server     "openacs"
    serverroot	/var/www/$server
    logroot	$serverroot/log/
    homedir	/usr/local/ns
    bindir	$homedir/bin
    db_name	$server
    db_user	$server
    db_host	localhost
    db_port	""
    db_password	"testing"
}
...
#+end_src

Environment variables from .env file are:
#+begin_src sh :tangle no :noweb yes
...
oacs_httpport='8000'
oacs_db_user="${PGUSER}"
oacs_db_passwod="${PGPASSWORD}"
oacs_db_name="${PGDATABASE}"
oacs_db_host="${PGHOST}"
oacs_db_port="${PGPORT}"
oacs_ipaddress='0.0.0.0'
...
#+end_src
** OpenACS listen port
:PROPERTIES:
:CUSTOM_ID: openacs-listen-port
:END:
=OACS_LISTEN_PORT= set the http listen port for the openacs.  In this case the OpenACS is accessible by URL [[http://localhost:8070][http://localhost:8070]].
#+begin_src sh :tangle no :noweb yes :dir ../src/
OACS_LISTEN_PORT=8070 docker-compose up
#+end_src
** OpenACS docker image
:PROPERTIES:
:CUSTOM_ID: openacs-docker-image
:END:
Docker-compose uses the following variables for pulling OpenACS image from docker hub:
- OACS_REPOSITORY
- OACS_IMAGE_NAME
- OACS_IMAGE_TAG
** NaviServer configuration file
:PROPERTIES:
:CUSTOM_ID: naviserver-configuration-file
:END:
=NS_CONF= - configuration file. Default value is =/usr/local/ns/conf/openacs-config.tcl=
1. Put the configuration file to =rootfs/usr/local/ns/conf=
2. Run docker compose
#+begin_src sh :tangle no :noweb yes :dir ../src/
NS_CONF="/usr/local/ns/conf/my-config.tcl" docker-compose up
#+end_src
** PostgreSQL docker image
:PROPERTIES:
:CUSTOM_ID: postgresql-docker-image
:END:
Docker-compose uses the following variables for pulling postgres image from docker hub:
- POSTGRES_REPOSITORY
- POSTGRES_TAG

** Database hostname
:PROPERTIES:
:CUSTOM_ID: database-hostname
:END:
=PGHOST= set the database hostname for the openacs. By default it has name of docker-compose database  service - postgres.
#+begin_src sh :tangle no :noweb yes :dir ../src/
PGHOST=foo docker-compose up
#+end_src
** Database name
:PROPERTIES:
:CUSTOM_ID: database-name
:END:
=PGDATABASE= set the database name for the openacs. By default it has name of docker-compose database  service - openacs.
#+begin_src sh :tangle no :noweb yes :dir ../src/
PGDATABASE=foo docker-compose up
#+end_src

** Database username
:PROPERTIES:
:CUSTOM_ID: database-username
:END:
=PGUSER= set the database username for the openacs and postgres.
#+begin_src sh :tangle no :noweb yes :dir ../src/
PGUSER=foouser docker-compose up
#+end_src
** Database password
:PROPERTIES:
:CUSTOM_ID: database-password
:END:
=PGPASSWORD= set the database user password for the openacs and postgres.
#+begin_src sh :tangle no :noweb yes :dir ../src/
PGPASSWORD=foopass docker-compose up
#+end_src
** Postgres tag
:PROPERTIES:
:CUSTOM_ID: postgres-tag
:END:
=POSTGRES_TAG= set the docker image tag for [[https://hub.docker.com/_/postgres][official postgres]].  Pay attention - some openacs version can use only correspond version of postgres.
#+begin_src sh :tangle no :noweb yes :dir ../src/
POSTGRES_TAG="14.1-alpine" docker-compose up
#+end_src
** Timezone
:PROPERTIES:
:CUSTOM_ID: timezone
:END:
Set the timezone for the containers, defaults to UTC. To set the timezone set the desired timezone with the variable TZ. Useful for setup correct time in logging.
#+begin_src sh :tangle no :noweb yes :dir ../src/
TZ="Europe/Moscow" docker-compose up
#+end_src

* CI/CD
:PROPERTIES:
:CUSTOM_ID: ci-cd
:END:
   For  build and push docker images we use  [[https://github.com/oupfiz5/openacs/blob/master/.github/workflows/on-push.yaml][GitHub Actions workflow]].
* Maintenance
:PROPERTIES:
:CUSTOM_ID: maintenance
:END:
** Shell access
:PROPERTIES:
:CUSTOM_ID: shell-access
:END:
For debugging and maintenance purposes you may want access the containers shell. If you are using Docker version 1.3.0 or higher you can access a running containers shell by starting bash using docker exec:
#+begin_src sh :tangle no :noweb yes :dir ../src/
docker exec -it openacs_openacs_1 /bin/bash
#+end_src

#+begin_src sh :tangle no :noweb yes :dir ../src/
docker exec -it openacs_postgres_1 /bin/bash
#+end_src

* ../CHANGELOG.md :noexport:
#+begin_src md :tangle ../CHANGELOG.md
# Changelog
## oacs-5-10 - 2023-05-06

### Added
- `hook/build.sh` image tag `latest` for docker image

### Changed
- `hook/push.sh` push docker image with tag `latest`
- github pipeline will use ``runs-on: ubuntu-22.04`
- writing a new openacs service script (`run, finish, type`)
- updated docker compose dependecies for postgres (`condition: service_healthy`)
#+end_src
* Code :code:noexport:
:PROPERTIES:
:CUSTOM_ID: code
:END:
** VERSIONS :code:
:PROPERTIES:
:CUSTOM_ID: versions
:END:
#+begin_src sh :shebang ""
CONTAINER_NAME="${CONTAINER_NAME:-openacs}"
NS_IMAGE_REPOSITORY="${NS_IMAGE_REPOSITORY:-oupfiz5}"
NS_IMAGE_NAME="${NS_IMAGE_NAME:-naviserver}"
NS_IMAGE_TAG="${NS_IMAGE_TAG:22.04-4.99.24}"
IMAGE_NAME="${IMAGE_NAME:-openacs}"
IMAGE_REPOSITORY="${IMAGE_REPOSITORY:-oupfiz5}"
IMAGE_TAG="${IMAGE_TAG:-oacs-5-10}"
OACS_TAG="${OACS_TAG:-oacs-5-10}"
#+end_src
** ../.fossil-settings/crlf-glob :code:
:PROPERTIES:
:CUSTOM_ID: ----fossil-settings-crlf-glob
:END:
#+begin_src sh :shebang ""
*
#+end_src
** ../.fossil-settings/crlf-glob.no-warn :code:
:PROPERTIES:
:CUSTOM_ID: ----fossil-settings-crlf-glob-no-warn
:END:
#+begin_src sh :shebang ""
*
#+end_src

** ../.fossil-settings/ignore-glob :code:
:PROPERTIES:
:CUSTOM_ID: ----fossil-settings-ignore-glob
:END:
#+begin_src sh :shebang ""
.git/
.github-mirroring/*
docs/
org/.configuration/*
tests/.bats-battery/*/.git
tests/.bats-battery/*/.github
#+end_src
** ../.fossil-settings/ignore-glob.no-warn :code:
:PROPERTIES:
:CUSTOM_ID: ----fossil-settings-crlf-glob-no-warn
:END:
#+begin_src sh :shebang ""
*
#+end_src
** ../.github/workflows/on-push.yaml :code:
:PROPERTIES:
:CUSTOM_ID: ----github-workflows-on-push-yaml
:END:
#+begin_src yaml :shebang ""
name: Build and push docker images

on:
  push:
    branches:
      - master
      - main
    paths:
      - '.github/*'
      - '.github/workflows/*'
      - 'src/*.sh'
      - 'src/Dockerfile*'
      - 'src/VERSIONS'
      - 'src/hook/*'
      - 'src/rootfs/*'
      - 'tests/**'
  pull_request:
    branches:
      - master
      - main
    paths:
      - '.github/*'
      - '.github/workflows/*'
      - 'src/*.sh'
      - 'src/Dockerfile*'
      - 'src/VERSIONS'
      - 'src/hook/*'
      - 'src/rootfs/*'
      - 'tests/**'
jobs:
  build:
    name: Build and push image to dockerhub
    runs-on: ubuntu-22.04
    steps:
      - name: Repo checkout
        uses: actions/checkout@v2

      - name: Login to DockerHub Registry
        run: |
          echo  ${{ secrets.DOCKERHUB_TOKEN }} | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: OpenACS. Build and push image.
        run: |
          echo "::group::Prepare environment"
          set -a; source ${GITHUB_WORKSPACE}/src/VERSIONS ; set +a;
          cd ${GITHUB_WORKSPACE}/src/hook
          echo "::endgroup::"
          echo "::group::Build image"
          ./build.sh
          echo "::endgroup::"
          echo "::group::Push image"
          ./push.sh
          echo "::endgroup::"
#+end_src
** ../.github/workflows/test.yaml :code:
:PROPERTIES:
:CUSTOM_ID: ----github-workflows-test-yaml
:END:
#+begin_src yaml :shebang ""
name: Tests and Checks

# * Controls
# Controls when the action will run.
on:
  push:
    paths:
      - '.github/*'
      - '.github/workflows/*'
      - 'src/*.sh'
      - 'src/Dockerfile*'
      - 'src/VERSIONS'
      - 'src/hook/*'
      - 'src/rootfs/**'
      - 'tests/**'
    branches-ignore:
      - 'master'
      - 'main'
  pull_request:
    paths:
      - '.github/*'
      - '.github/workflows/*'
      - 'src/*.sh'
      - 'src/Dockerfile*'
      - 'src/VERSIONS'
      - 'src/hook/*'
      - 'src/rootfs/**'
      - 'tests/**'
    branches-ignore:
      - 'master'
      - 'main'
  workflow_dispatch:

# * Jobs
jobs:
  checks:
    name: Tests and Checks
    runs-on: ubuntu-22.04
    steps:
      - name: Repo checkout
        uses: actions/checkout@v2

      - name: Check shell files (shellcheck)
        run: |
          sudo apt-get update -y
          sudo apt-get install shellcheck
          cd ${GITHUB_WORKSPACE}/tests
          .bats-battery/bats-core/bin/bats 01.shellchecks.bats

      - name: Check Dockerfile (hadolint)
        run: |
          cd ${GITHUB_WORKSPACE}/tests
          .bats-battery/bats-core/bin/bats 02.dockerfile_check.bats

      - name: OpenACS. Build. Check image and container.
        run: |
          echo "::group::Build image"
          set -a; source ${GITHUB_WORKSPACE}/src/VERSIONS ; set +a;
          echo "Build image"
          cd ${GITHUB_WORKSPACE}/src/hook
          ./build.sh
          echo "::endgroup::"
          echo "::group::Check image and container"
          cd ${GITHUB_WORKSPACE}/tests
          echo "Check docker image (dockle)"
          .bats-battery/bats-core/bin/bats 03.docker_image_check.bats
          echo "Check docker container"
          .bats-battery/bats-core/bin/bats 04.container_check.bats
          echo "::endgroup::"
#+end_src
** ../.github/.trigger_on_push :code:
:PROPERTIES:
:CUSTOM_ID: ----github--trigger-on-push
:END:
#+begin_src yaml :shebang ""
Trigger: 3
#+end_src
** ../.gitignore :code:
:PROPERTIES:
:CUSTOM_ID: ----gitignore
:END:
#+begin_src sh :shebang ""
.fslckout
.projectile
.fossil-settings/*
#+end_src
** Dockerfile :code:
:PROPERTIES:
:CUSTOM_ID: dockerfile
:END:
#+begin_src sh :shebang ""
# * Arguments
ARG \
    NS_IMAGE_REPOSITORY="${NS_IMAGE_REPOSITORY}" \
    NS_IMAGE_NAME="${NS_IMAGE_NAME}" \
    NS_IMAGE_TAG="${NS_IMAGE_TAG}"

# * From
FROM ${NS_IMAGE_REPOSITORY}/${NS_IMAGE_NAME}:${NS_IMAGE_TAG}

# * Environment
ENV NS_CONF="/usr/local/ns/conf/openacs-config.tcl"

ARG \
    BUILD_DATE="${BUILD_DATE}" \
    OACS_TAG="${OACS_TAG}"

# * Labels
# hadolint ignore=DL3048
LABEL \
    maintainer="Oupfiz V <oupfiz5@yandex.ru>" \
    org.opencontainers.image.created="${BUILD_DATE}" \
    org.opencontainers.image.authors="Oupfiz V (Five)" \
    org.opencontainers.image.url="https://chiselapp.com/user/oupfiz5/repository/openacs/home" \
    org.opencontainers.image.documentation="https://chiselapp.com/user/oupfiz5/repository/openacs/wiki" \
    org.opencontainers.image.source="https://chiselapp.com/user/oupfiz5/repository/openacs/brlist" \
    org.opencontainers.image.version="0.0.3d" \
    org.opencontainers.image.revision="" \
    org.opencontainers.image.vendor="" \
    org.opencontainers.image.licenses="" \
    org.opencontainers.image.ref.name="" \
    org.opencontainers.image.title="OpenACS on NaviServer docker image using ubuntu" \
    org.opencontainers.image.description="OpenACS on NaviServer docker image using ubuntu" \
    custom.package.version.openacs="${OACS_TAG}" \ org.opencontainers.image.ns="${NS_IMAGE_REPOSITORY}/${NS_IMAGE_NAME}:${NS_IMAGE_TAG}"

# * Copy configuration files
# COPY rootfs/etc /etc/

# * Copy run file
COPY rootfs/run_openacs.sh /


# * Install OpenACS
RUN mkdir -p /var/www

ADD https://github.com/openacs/openacs-core/archive/"${OACS_TAG}".tar.gz /tmp/"${OACS_TAG}".tar.gz

# ** Run
# hadolint ignore=DL3008
RUN tar xzf /tmp/"${OACS_TAG}".tar.gz -C /var/www; \
    mv /var/www/openacs-core-"${OACS_TAG}" /var/www/openacs; \
    mkdir /var/www/openacs/log/; \
    chown -R nsadmin:nsadmin /var/www/openacs; \
    rm /tmp/"${OACS_TAG}".tar.gz

# ** Install openacs-bootstrap3-theme
ADD https://github.com/openacs/openacs-bootstrap3-theme/archive/"${OACS_TAG}".tar.gz /tmp/openacs-bootstrap3-theme-"${OACS_TAG}".tar.gz

RUN tar xzf /tmp/openacs-bootstrap3-theme-"${OACS_TAG}".tar.gz -C /var/www/openacs/packages; \
    mv /var/www/openacs/packages/openacs-bootstrap3-theme-"${OACS_TAG}" /var/www/openacs/packages/openacs-bootstrap3-theme; \
    rm /tmp/openacs-bootstrap3-theme-"${OACS_TAG}".tar.gz

# ** Copy openacs configuration files
COPY rootfs/usr/local/ns/conf/openacs-config.tcl /usr/local/ns/conf/openacs-config.tcl
COPY rootfs/var/www/openacs/www/SYSTEM/openacs-test.tcl /var/www/openacs/www/SYSTEM/openacs-test.tcl

# ** Install and configure extra OpenACS packages
COPY rootfs/usr/local/ns/conf/install-oacs-core-config.xml /var/www/openacs/install.xml

# * Change directory
WORKDIR /var/www/openacs

# * Expose
EXPOSE 8000

# * Environment

# * Entrypoint
ENTRYPOINT ["/run_openacs.sh"]

# * Cmd
CMD [ "/usr/local/ns/conf/openacs-config.tcl"]
#+end_src
** rootfs/run_openacs.sh :code:
:PROPERTIES:
:CUSTOM_ID: rootfs-run-openacs-sh
:END:
#+begin_src sh :shebang "" :tangle-mode (identity #o755)
#!/bin/bash
NS_CONF="${NS_CONF:-'/usr/local/ns/conf/openacs-config.tcl'}"

until PGPASSWORD="${PGPASSWORD}" pg_isready -h "${PGHOST}" -U "${PGUSER}"; do
    echo >&2 "Postgres db is unavailable - sleeping"
    sleep 1
done

echo >&2 "Postgres is up - Starting OpenACS Now"
echo >&2 "/usr/local/ns/bin/nsd -f -u nsadmin -g nsadmin -t ${NS_CONF}"
/usr/local/ns/bin/nsd -f -u nsadmin -g nsadmin -t "${NS_CONF}"
#+end_src

** rootfs/usr/local/ns/conf/openacs-config.tcl :code:
:PROPERTIES:
:CUSTOM_ID: rootfs-usr-local-ns-conf-openacs-config-tcl
:END:

#+begin_src tcl :shebang "" :tangle-mode (identity #o644)
######################################################################
#
# Config parameter for an OpenACS site using NaviServer.
#
# These default settings will only work in limited circumstances.
# Two servers with default settings cannot run on the same host
#
######################################################################
ns_log notice "nsd.tcl: starting to read configuration file..."

#---------------------------------------------------------------------
# Port settings:
#    Change the HTTP and HTTPS port to e.g. 80 and 443 for production
#    use.  Setting the HTTPS port to 0 means to active the https
#    driver for ns_http, but do not listen on this port.
#
# Note: If port is privileged (usually < 1024), OpenACS must be
# started by root, and the run script must contain the flag '-b
# address:port' which matches the address and port as specified below.
#
#     httpsport		0
#     httpsport		8443
#
# The "hostname" and "ipaddress" should be set to actual values such
# that the server is reachable over the Internet. The default values
# are fine for testing purposes. One can specify for the "ipaddress"
# also multiple values (e.g. IPv4 and IPv6).
#
#    hostname		localhost
#    ipaddress		127.0.0.1  ;# listen on loopback via IPv4
#    ipaddress		0.0.0.0    ;# listen on all IPv4 addresses
#    ipaddress        ::1        ;# listen on loopback via IPv6
#    ipaddress		::0        ;# listen on all IPv6 addresses

# All default variables in defaultConfig can be overloaded by
# 1) setting these variables in this file (highest precedence)
# 2) setting these variables as environment variables with
#    the "oacs_" prefix (suitable for e.g. docker setups)
# 3) set the variables from the default values.
#
set defaultConfig {
    hostname	localhost
    ipaddress	127.0.0.1
    httpport	8000
    httpsport	""

    server     "openacs"
    serverroot	/var/www/$server
    logroot	$serverroot/log/
    homedir	/usr/local/ns
    bindir	$homedir/bin
    db_name	$server
    db_user	$server
    db_host	localhost
    db_port	""
    db_password	"testing"
}

set servername		"New OpenACS Installation - Development"

# Are we running behind a proxy?
set proxy_mode		false

#---------------------------------------------------------------------
# Which database do you want? PostgreSQL or Oracle?
set database              postgres

if { $database eq "oracle" } {
    set db_password           "mysitepassword"
}

#---------------------------------------------------------------------
# If debug is false, all debugging will be turned off.
set debug false
set dev   false
set verboseSQL false

set max_file_upload_mb        20
set max_file_upload_min        5

#---------------------------------------------------------------------
# Set headers that should be included in every response from the
# server.
#
set nssock_extraheaders {
    X-Frame-Options            "SAMEORIGIN"
    X-Content-Type-Options     "nosniff"
    X-XSS-Protection           "1; mode=block"
    Referrer-Policy            "strict-origin"
}

set nsssl_extraheaders {
    Strict-Transport-Security "max-age=31536000; includeSubDomains"
}
append nsssl_extraheaders $nssock_extraheaders

######################################################################
#
# End of instance-specific settings
#
# Nothing below this point need be changed in a default install.
#
######################################################################
#
# For all potential variables, allow environment variables such as
# "oacs_httpport" or "oacs_ipaddress" to override local values.
#
source [file dirname [ns_info nsd]]/../tcl/init.tcl
ns_configure_variables "oacs_" $defaultConfig

#---------------------------------------------------------------------
# Set environment variables HOME and LANG. HOME is needed since
# otherwise some programs called via exec might try to write into the
# root home directory.
#
set env(HOME) $homedir
set env(LANG) en_US.UTF-8


ns_logctl severity "Debug(ns:driver)" $debug

#---------------------------------------------------------------------
#
# NaviServer's directories. Auto-configurable.
#
#---------------------------------------------------------------------
# Where are your pages going to live ?
set pageroot                  ${serverroot}/www
set directoryfile             "index.tcl index.adp index.html index.htm"

#---------------------------------------------------------------------
# Global server parameters
#---------------------------------------------------------------------
ns_section ns/parameters {
    ns_param	serverlog	${logroot}/error.log
    ns_param	pidfile		${logroot}/nsd.pid
    ns_param	home		$homedir
    ns_param	debug		$debug

    # Define optionally the tmpdir. If not specified, the
    # environment variable TMPDIR is used. If that is not
    # specified either, a system specific constant us used
    # (compile time macro P_tmpdir)
    #
    # ns_param        tmpdir    c:/tmp

    # Timeout for shutdown to let existing connections and background
    # jobs finish.  When this time limit is exceeded the server shuts
    # down immediately.
    #
    # ns_param    shutdowntimeout 20s      ;# 20s is the default

    #
    # Configuration of error.log
    #
    # Rolling of logfile:
    ns_param	logroll		on
    ns_param	logmaxbackup	100      ;# 10 is default
    ns_param	logrollfmt	%Y-%m-%d ;# format appended to serverlog filename when rolled
    #
    # Format of log entries in serverlog:
    # ns_param  logsec          false    ;# add timestamps in second resolution (default: true)
    # ns_param  logusec         true     ;# add timestamps in microsecond (usec) resolution (default: false)
    # ns_param  logusecdiff     true     ;# add timestamp diffs since in microsecond (usec) resolution (default: false)
    # ns_param  logthread       false    ;# add thread-info the log file lines (default: true)
    ns_param	logcolorize	true     ;# colorize log file with ANSI colors (default: false)
    ns_param	logprefixcolor	green    ;# black, red, green, yellow, blue, magenta, cyan, gray, default
    # ns_param  logprefixintensity normal;# bright or normal
    #
    # Severities to be logged (can be controlled at runtime via ns_logctl)
    #ns_param	logdebug	$debug    ;# debug messages
    ns_param	logdev		$dev      ;# development message
    ns_param    lognotice       true      ;# informational messages
    #ns_param   sanitizelogfiles 2        ;# default: 2; 0: none, 1: full, 2: human-friendly

    # ns_param	mailhost            localhost

    # ns_param	jobsperthread       0     ;# number of ns_jobs before thread exits
    # ns_param	jobtimeout          5m    ;# default "ns_job wait" timeout
    # ns_param	joblogminduration   1s    ;# default: 1s

    # ns_param	schedsperthread     0     ;# number of scheduled jobs before thread exits
    # ns_param	schedlogminduration 2s    ;# print warnings when scheduled job takes longer than that

    # Write asynchronously to log files (access log and error log)
    # ns_param	asynclogwriter	true		;# false

    #ns_param       mutexlocktrace       true   ;# default false; print durations of long mutex calls to stderr

    # Reject output operations on already closed connections (e.g. subsequent ns_return statements)
    #ns_param       rejectalreadyclosedconn false ;# default: true

    # Allow concurrent create operations of Tcl interpreters.
    # Versions up to at least Tcl 8.5 are known that these might
    # crash in case two threads create interpreters at the same
    # time. These crashes were hard to reproduce, but serializing
    # interpreter creation helped. Starting with Tcl 8.6,
    # the default is set to "true".
    #ns_param        concurrentinterpcreate false   ;# default: true

    # Enforce sequential thread initialization. This is not really
    # desirably in general, but might be useful for hunting strange
    # crashes or for debugging with valgrind.
    # ns_param	tclinitlock	true           ;# default: false

    #
    # Encoding settings (see http://dqd.com/~mayoff/encoding-doc.html)
    #
    # ns_param	HackContentType	1

    # NaviServer's defaults charsets are all utf-8.  Although the
    # default charset is utf-8, set the parameter "OutputCharset"
    # here, since otherwise OpenACS uses in the meta-tags the charset
    # from [ad_conn charset], which is taken from the db and
    # per-default ISO-8859-1.
    ns_param	OutputCharset	utf-8
    # ns_param	URLCharset	utf-8

    #
    # DNS configuration parameters
    #
    ns_param dnscache true          ;# default: true
    ns_param dnswaittimeout 5s      ;# time for waiting for a DNS reply; default: 5s
    ns_param dnscachetimeout 1h     ;# time to keep entries in cache; default: 1h
    ns_param dnscachemaxsize 500kB  ;# max size of DNS cache in memory units; default: 500kB

    # Running behind proxy? Used also by OpenACS...
    ns_param reverseproxymode	$proxy_mode
}

#---------------------------------------------------------------------
# Definition of NaviServer servers (add more, when true NaviServer
# virtual hosting should be used).
#---------------------------------------------------------------------
ns_section ns/servers {
    ns_param $server $servername
}


#---------------------------------------------------------------------
# Global server modules
#---------------------------------------------------------------------
ns_section ns/modules {
    #
    # Load networking modules named "nssock" and/or "nsssl" depending
    # on existence of Tcl variables "httpport" and "httpsport".
    #
    if {[info exists httpport] && $httpport ne ""}  { ns_param nssock ${bindir}/nssock }
    if {[info exists httpsport] && $httpsport ne ""} { ns_param nsssl  ${bindir}/nsssl }
}

#---------------------------------------------------------------------
# Configuration for plain HTTP interface  -- module nssock
#---------------------------------------------------------------------
if {[info exists httpport]} {
    #
    # We have an "httpport" configured, so configure this module.
    #
    ns_section ns/module/nssock {
        ns_param	defaultserver	$server
        ns_param	address		$ipaddress
        ns_param	hostname	$hostname
        ns_param	port		$httpport                ;# default 80
        ns_param	maxinput	${max_file_upload_mb}MB  ;# 1MB, maximum size for inputs (uploads)
        ns_param	recvwait	${max_file_upload_min}m  ;# 30s, timeout for receive operations
        # ns_param	maxline		8192	;# 8192, max size of a header line
        # ns_param	maxheaders	128	;# 128, max number of header lines
        # ns_param	uploadpath	/tmp	;# directory for uploads
        # ns_param	backlog		256	;# 256, backlog for listen operations
        # ns_param	maxqueuesize	256	;# 1024, maximum size of the queue
        # ns_param	acceptsize	10	;# backlog; Maximum number of requests accepted at once.
        # ns_param	deferaccept     true    ;# false, Performance optimization, may cause recvwait to be ignored
        # ns_param	bufsize		16kB	;# 16kB, buffersize
        # ns_param	readahead	16kB	;# value of bufsize, size of readahead for requests
        # ns_param	sendwait	30s	;# 30s, timeout for send operations
        # ns_param	closewait	2s	;# 2s, timeout for close on socket
        # ns_param	keepwait	2s	;# 5s, timeout for keep-alive
        # ns_param	nodelay         false   ;# true; deactivate TCP_NODELAY if Nagle algorithm is wanted
        # ns_param	keepalivemaxuploadsize    500kB  ;# 0, don't allow keep-alive for upload content larger than this
        # ns_param	keepalivemaxdownloadsize  1MB    ;# 0, don't allow keep-alive for download content larger than this
        # ns_param	spoolerthreads	1	;# 0, number of upload spooler threads
        ns_param	maxupload	100kB	;# 0, when specified, spool uploads larger than this value to a temp file
        ns_param	writerthreads	2	;# 0, number of writer threads
        ns_param	writersize	1kB	;# 1MB, use writer threads for files larger than this value
        # ns_param	writerbufsize	8kB	;# 8kB, buffer size for writer threads
        # ns_param	writerstreaming	true	;# false;  activate writer for streaming HTML output (when using ns_write)

        #
        # Options for port reuse (see https://lwn.net/Articles/542629/)
        # These options require proper OS support.
        #
        # ns_param  reuseport       true    ;# false;  normally not needed to be set, set by driverthreads when necessary
        # ns_param	driverthreads	2	;# 1; use multiple driver threads; activates "reuseport"

        #
        # Extra driver-specific response headers fields to be added for
        # every request.
        #
        ns_param    extraheaders    $nssock_extraheaders
    }
    #
    # Define, which "host" (as supplied by the "host:" header
    # field) accepted over this driver should be associated with
    # which server.
    #
    ns_section ns/module/nssock/servers {
        ns_param $server $hostname
        foreach address $ipaddress {
            ns_param $server $address
        }
    }
}

#---------------------------------------------------------------------
# Configuration for HTTPS interface (SSL/TLS) -- module nsssl
#---------------------------------------------------------------------

if {[info exists httpsport]} {
    #
    # We have an "httpsport" configured, so configure this module.
    #
    ns_section ns/module/nsssl {
        ns_param defaultserver	$server
        ns_param address	$ipaddress
        ns_param port		$httpsport
        ns_param hostname	$hostname
        ns_param ciphers	"ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384"
        ns_param protocols	"!SSLv2:!SSLv3:!TLSv1.0:!TLSv1.1"
        ns_param certificate	$serverroot/etc/certfile.pem
        ns_param verify		0
        ns_param writerthreads	2
        ns_param writersize	1kB
        ns_param writerbufsize	16kB	;# 8kB, buffer size for writer threads
        # ns_param writerstreaming	true	;# false
        # ns_param spoolerthreads	1	;# 0, number of upload spooler threads
        # ns_param maxupload	100kB	;# 0, when specified, spool uploads larger than this value to a temp file
        # ns_param deferaccept	true    ;# false, Performance optimization
        # ns_param nodelay	false   ;# true; deactivate TCP_NODELAY if Nagle algorithm is wanted
        ns_param maxinput	${max_file_upload_mb}MB   ;# Maximum file size for uploads in bytes
        ns_param extraheaders	$nsssl_extraheaders
        ns_param OCSPstapling   on        ;# off; activate OCSP stapling
        # ns_param OCSPstaplingVerbose  on ;# off; make OCSP stapling more verbose
    }
    #
    # Define, which "host" (as supplied by the "host:" header field)
    # accepted over this driver should be associated with which
    # server. This parameter is for virtual servers. Here we just
    # register the $hostname and the $address (in case, the server is
    # addressed via its IP address).
    #
    ns_section ns/module/nsssl/servers {
        ns_param $server $hostname
        foreach address $ipaddress {
            ns_param $server $address
        }
    }
}


#---------------------------------------------------------------------
# Thread library (nsthread) parameters
#---------------------------------------------------------------------
ns_section ns/threads {
    ns_param	stacksize	1MB
}
#---------------------------------------------------------------------
# Extra mime types
#---------------------------------------------------------------------
ns_section ns/mimetypes {
    #  Note: NaviServer already has an exhaustive list of MIME types:
    #  see: /usr/local/src/naviserver/nsd/mimetypes.c
    #  but in case something is missing you can add it here.

    #ns_param	default		*/*
    #ns_param	noextension	text/html
    #ns_param	.pcd		image/x-photo-cd
    #ns_param	.prc		application/x-pilot
}

#---------------------------------------------------------------------
# Global fastpath parameters
#---------------------------------------------------------------------
ns_section ns/fastpath {
    #ns_param        cache               true       ;# default: false
    #ns_param        cachemaxsize        10MB       ;# default: 10MB
    #ns_param        cachemaxentry       100kB      ;# default: 8kB
    #ns_param        mmap                true       ;# default: false
    #ns_param        gzip_static         true       ;# check for static gzip; default: false
    #ns_param        gzip_refresh        true       ;# refresh stale .gz files on the fly using ::ns_gzipfile
    #ns_param        gzip_cmd            "/usr/bin/gzip -9"  ;# use for re-compressing
    #ns_param        minify_css_cmd      "/usr/bin/yui-compressor --type css"
    #ns_param        minify_js_cmd       "/usr/bin/yui-compressor --type js"
    #ns_param        brotli_static       true       ;# check for static brotli files; default: false
    #ns_param        brotli_refresh      true       ;# refresh stale .br files on the fly using ::ns_brotlifile
    #ns_param        brotli_cmd          "/usr/bin/brotli -f -Z"  ;# use for re-compressing
}

#---------------------------------------------------------------------
#
# Server-level configuration
#
#  There is only one server in NaviServer, but this is helpful when multiple
#  servers share the same configuration file.  This file assumes that only
#  one server is in use so it is set at the top in the "server" Tcl variable
#  Other host-specific values are set up above as Tcl variables, too.
#
#---------------------------------------------------------------------
#
# Server parameters
#
ns_section ns/server/$server {
    #
    # Scaling and Tuning Options
    #
    # ns_param	maxconnections	100      ;# 100; number of allocated connection structures
    ns_param    rejectoverrun   true     ;# false (send 503 when queue overruns)
    #ns_param   retryafter      5s       ;# time for Retry-After in 503 cases
    #ns_param   filterrwlocks   false    ;# default: true

    # ns_param	maxthreads	10       ;# 10; maximal number of connection threads
    ns_param	minthreads	2        ;# 1; minimal number of connection threads

    ns_param	connsperthread	1000     ;# 10000; number of connections (requests) handled per thread
    ;# Setting connsperthread to > 0 will cause the thread to
    ;# graciously exit, after processing that many requests, thus
    ;# initiating kind-of Tcl-level garbage collection.

    # ns_param	threadtimeout	2m       ;# 2m; timeout for idle threads.
    ;# In case, minthreads < maxthreads, threads are shutdown after
    ;# this idle time until minthreads are reached.

    # ns_param	lowwatermark	10       ;# 10; create additional threads above this queue-full percentage
    ns_param	highwatermark	100      ;# 80; allow concurrent creates above this queue-is percentage
                                         ;# 100 means to disable concurrent creates
    #ns_param    connectionratelimit 200 ;# 0; limit rate per connection to this amount (KB/s); 0 means unlimited
    #ns_param    poolratelimit   200     ;# 0; limit rate for pool to this amount (KB/s); 0 means unlimited

    # Compress response character data: ns_return, ADP etc.
    #
    ns_param	compressenable	on       ;# false, use "ns_conn compress" to override
    # ns_param	compresslevel	4        ;# 4, 1-9 where 9 is high compression, high overhead
    # ns_param	compressminsize	512      ;# Compress responses larger than this
    # ns_param	compresspreinit true     ;# false, if true then initialize and allocate buffers at startup

    # Enable nicer directory listing (as handled by the OpenACS request processor)
    # ns_param	directorylisting	fancy	;# Can be simple or fancy

    #
    # Configuration of replies
    #
    # ns_param	realm		yourrealm	;# Default realm for Basic authentication
    # ns_param	noticedetail	false		;# true, return detail information in server reply
    # ns_param	errorminsize	0		;# 514, fill-up reply to at least specified bytes (for ?early? MSIE)
    # ns_param	headercase	preserve	;# preserve, might be "tolower" or "toupper"
    # ns_param	checkmodifiedsince	false	;# true, check modified-since before returning files from cache. Disable for speedup

    #
    # Extra server-specific response headers fields to be added for
    # every response on this server
    #
    #ns_param    extraheaders    {...}
}

########################################################################
# Connection thread pools.
#
#  Per default, NaviServer uses a "default" connection pool, which
#  needs no extra configuration.  Optionally, multiple connection
#  thread pools can be configured using the following parameters.
#
#       map
#       connsperthread
#       highwatermark
#       lowwatermark
#       maxconnections
#       rejectoverrun
#       retryafter
#       maxthreads
#       minthreads
#       poolratelimit
#       connectionratelimit
#       threadtimeout
#
# In order to define thread pools, do the following:
#
#  1. Add pool names to "ns/server/$server/pools"
#  2. Configure pools with the noted parameters
#  3. Map method/URL combinations for these pools
#
#  All unmapped method/URL's will go to the default server pool of the
#  server.
#
########################################################################

ns_section ns/server/$server/pools {
    #
    # To activate connection thread pools, uncomment one of the
    # following lines and/or add other pools.

    #ns_param   monitor	"Monitoring actions to check healthiness of the system"
    #ns_param   fast	"Fast requests, e.g. less than 10ms"
    #ns_param   slow    "Slow lane pool, for request remapping"
}

ns_section ns/server/$server/pool/monitor {
    ns_param   minthreads 2
    ns_param   maxthreads 2

    ns_param   map "GET /SYSTEM"
    ns_param   map "GET /admin/nsstats"
    ns_param   map "GET /ds"
    ns_param   map "GET /request-monitor"
    ns_param   map "POST /SYSTEM"
    ns_param   map "POST /admin/nsstats"
    ns_param   map "POST /ds"
}

ns_section ns/server/$server/pool/fast {
    ns_param   minthreads 2
    ns_param   maxthreads 2
    ns_param   rejectoverrun true

    ns_param   map "GET /*.png"
    ns_param   map "GET /*.PNG"
    ns_param   map "GET /*.jpg"
    ns_param   map "GET /*.pdf"
    ns_param   map "GET /*.gif"
    ns_param   map "GET /*.mp4"
    ns_param   map "GET /*.ts"
    ns_param   map "GET /*.m3u8"
}

ns_section ns/server/$server/pool/slow {
    ns_param   minthreads 2
    ns_param   maxthreads 5
    ns_param   maxconnections 600
    ns_param   rejectoverrun true
}


#---------------------------------------------------------------------
# Special HTTP pages
#---------------------------------------------------------------------
ns_section ns/server/$server/redirects {
    ns_param   404 /shared/404
    ns_param   403 /shared/403
    ns_param   503 /shared/503
    ns_param   500 /shared/500
}

#---------------------------------------------------------------------
# ADP (AOLserver Dynamic Page) configuration
#---------------------------------------------------------------------
ns_section ns/server/$server/adp {
    ns_param	enabledebug	$debug
    ns_param	map		/*.adp		;# Extensions to parse as ADP's
    # ns_param	map		"/*.html"	;# Any extension can be mapped
    #
    # ns_param	cache		true		;# false, enable ADP caching
    # ns_param	cachesize	10MB		;# 5MB, size of ADP cache
    # ns_param	bufsize		5MB		;# 1MB, size of ADP buffer
    #
    # ns_param	trace		true		;# false, trace execution of adp scripts
    # ns_param	tracesize	100		;# 40, max number of entries in trace
    #
    # ns_param	stream		true		;# false, enable ADP streaming
    # ns_param	enableexpire	true		;# false, set "Expires: now" on all ADP's
    # ns_param	safeeval	true		;# false, disable inline scripts
    # ns_param	singlescript	true		;# false, collapse Tcl blocks to a single Tcl script
    # ns_param	detailerror	false		;# true,  include connection info in error backtrace
    # ns_param	stricterror	true		;# false, interrupt execution on any error
    # ns_param	displayerror	true		;# false, include error message in output
    # ns_param	trimspace	true		;# false, trim whitespace from output buffer
    # ns_param	autoabort	false		;# true,  failure to flush a buffer (e.g. closed HTTP connection) generates an ADP exception
    #
    # ns_param	errorpage	/.../errorpage.adp	;# page for returning errors
    # ns_param	startpage	/.../startpage.adp	;# file to be run for every adp request; should include "ns_adp_include [ns_adp_argv 0]"
    # ns_param	debuginit	some-proc		;# ns_adp_debuginit, proc to be executed on debug init
    #
}

ns_section ns/server/$server/adp/parsers {
    ns_param	fancy		".adp"
}

#
# Tcl Configuration
#
ns_section ns/server/$server/tcl {
    ns_param	library		${serverroot}/tcl
    ns_param	debug		$debug
    # ns_param	nsvbuckets	16       ;# default: 8
    # ns_param	nsvrwlocks      false    ;# default: true
}

ns_section ns/server/$server/fastpath {
    ns_param	serverdir	${homedir}
    ns_param	pagedir		${pageroot}
    #
    # Directory listing options
    #
    # ns_param	directoryfile		"index.adp index.tcl index.html index.htm"
    # ns_param	directoryadp		$pageroot/dirlist.adp ;# Choose one or the other
    # ns_param	directoryproc		_ns_dirlist           ;#  ...but not both!
    # ns_param	directorylisting	fancy                 ;# Can be simple or fancy
    #
}

#---------------------------------------------------------------------
# HTTP client configuration
#---------------------------------------------------------------------
ns_section ns/server/$server/httpclient {
    ns_param	logging		on ;# default: off
    ns_param	logfile		${logroot}/httpclient.log
    ns_param	logrollfmt	%Y-%m-%d ;# format appended to log filename
    #ns_param	logmaxbackup	100      ;# 10, max number of backup log files
    #ns_param	logroll		true     ;# true, should server log files automatically
    #ns_param	logrollonsignal	true     ;# false, perform roll on a sighup
    #ns_param	logrollhour	0        ;# 0, specify at which hour to roll
}

#---------------------------------------------------------------------
# OpenACS specific settings (per server)
#---------------------------------------------------------------------
#
# Define/override kernel parameters in section /acs
#
ns_section ns/server/$server/acs {
    ns_param NsShutdownWithNonZeroExitCode 1
    # ns_param WithDeprecatedCode 0
    # ns_param LogIncludeUserId 1
    #
}

# Define/override OpenACS package parameters in section
# ending with /acs/PACKAGENAME
#
# Provide tailored sizes for the site node cache in acs-tcl:
#
ns_section ns/server/$server/acs/acs-tcl {
    # ns_param SiteNodesCacheSize        2000000
    # ns_param SiteNodesIdCacheSize       100000
    # ns_param SiteNodesChildenCacheSize  100000
    # ns_param SiteNodesPrefetch  {/file /changelogs /munin}
    # ns_param UserInfoCacheSize          2000000
}

#
# Set for all package instances of acs-mail-lite the
# EmailDeliveryMode. Setting this to "log" is useful for developer
# instances.
#
ns_section ns/server/$server/acs/acs-mail-lite {
    # ns_param EmailDeliveryMode log
}

#
# API browser configuration: setting IncludeCallingInfo to "true" is
# useful mostly for developer instances.
#
ns_section ns/server/$server/acs/acs-api-browser {
    # ns_param IncludeCallingInfo true
}

#---------------------------------------------------------------------
# WebDAV Support (optional, requires oacs-dav package to be installed
#---------------------------------------------------------------------
ns_section ns/server/$server/tdav {
    ns_param	propdir            ${serverroot}/data/dav/properties
    ns_param	lockdir            ${serverroot}/data/dav/locks
    ns_param	defaultlocktimeout 300
}

ns_section ns/server/$server/tdav/shares {
    ns_param	share1		"OpenACS"
    # ns_param	share2		"Share 2 description"
}

ns_section ns/server/$server/tdav/share/share1 {
    ns_param	uri		"/dav/*"
    # all WebDAV options
    ns_param	options		"OPTIONS COPY GET PUT MOVE DELETE HEAD MKCOL POST PROPFIND PROPPATCH LOCK UNLOCK"
}

#ns_section ns/server/$server/tdav/share/share2 {
# ns_param	uri "/share2/path/*"
# read-only WebDAV options
# ns_param options "OPTIONS COPY GET HEAD MKCOL POST PROPFIND PROPPATCH"
#}


#---------------------------------------------------------------------
# Access log -- nslog
#---------------------------------------------------------------------
ns_section ns/server/$server/module/nslog {
    #
    # General parameters for access.log
    #
    ns_param	file			${logroot}/access.log
    # ns_param	maxbuffer		100	;# 0, number of logfile entries to keep in memory before flushing to disk
    #
    # Control what to log
    #
    # ns_param	suppressquery	true	;# false, suppress query portion in log entry
    # ns_param	logreqtime	true	;# false, include time to service the request
    ns_param	logpartialtimes	true	;# false, include high-res start time and partial request durations (accept, queue, filter, run)
    ns_param    logthreadname   true    ;# default: false; include thread name for linking with error.log
    # ns_param	formattedtime	true	;# true, timestamps formatted or in secs (unix time)
    # ns_param	logcombined	true	;# true, Log in NSCA Combined Log Format (referer, user-agent)
    ns_param	checkforproxy	$proxy_mode ;# false, check for proxy header (X-Forwarded-For)
    ns_param	masklogaddr     true    ;# false, mask IP address in log file for GDPR (like anonip IP anonymizer)
    ns_param	maskipv4        255.255.255.0  ;# mask for IPv4 addresses
    ns_param	maskipv6        ff:ff:ff:ff::  ;# mask for IPv6 addresses

    #
    # Add extra entries to the access log via specifying a Tcl
    # list of request header fields in "extendedheaders"
    #
    if {[ns_config "ns/server/$server/acs" LogIncludeUserId 0]} {
        ns_param   extendedheaders    "X-User-Id"
    }

    #
    #
    # Control log file rolling
    #
    # ns_param	maxbackup	100	;# 10, max number of backup log files
    # ns_param	rolllog		true	;# true, should server log files automatically
    # ns_param	rollhour	0	;# 0, specify at which hour to roll
    # ns_param	rollonsignal	true	;# false, perform roll on a sighup
    ns_param	rollfmt		%Y-%m-%d ;# format appended to log filename
}

#---------------------------------------------------------------------
#
# CGI interface -- nscgi, if you have legacy stuff. Tcl or ADP files
# inside NaviServer are vastly superior to CGIs.
#
#---------------------------------------------------------------------
# ns_section ns/server/$server/modules {
#     ns_param	nscgi ${bindir}/nscgi
# }
# ns_section ns/server/$server/module/nscgi {
#     ns_param  map	"GET  /cgi-bin ${serverroot}/cgi-bin"
#     ns_param  map	"POST /cgi-bin ${serverroot}/cgi-bin"
#     ns_param  Interps CGIinterps
#     ns_param  allowstaticresources true    ;# default: false
# }
# ns_section ns/interps/CGIinterps {
#     ns_param .pl "/usr/bin/perl"
# }

#---------------------------------------------------------------------
#
# PAM authentication
#
#---------------------------------------------------------------------
# ns_section ns/server/$server/modules {
#     ns_param	nspam ${bindir}/nspam
# }
# ns_section ns/server/$server/module/nspam {
#     ns_param	PamDomain "pam_domain"
# }

#---------------------------------------------------------------------
#
# Database drivers:
#
# Make sure the drivers are compiled and put it in $bindir.
#
#---------------------------------------------------------------------
ns_section ns/db/drivers {

    if { $database eq "oracle" } {
        ns_param	ora8           ${bindir}/ora8
    } else {
        ns_param	postgres       ${bindir}/nsdbpg
        #
        ns_logctl severity "Debug(sql)" -color blue $verboseSQL
    }

    if { $database eq "oracle" } {
        ns_section ns/db/driver/ora8
        ns_param	maxStringLogLength -1
        ns_param	LobBufferSize      32768
    } else {
        ns_section ns/db/driver/postgres
        # Set this parameter, when "psql" is not on your path (OpenACS specific)
        # ns_param	pgbin	"/usr/local/pg960/bin/"
    }
}

# Database Pools: This is how NaviServer "talks" to the RDBMS. You
# need three for OpenACS, named here pool1, pool2 and pool3. Most
# queries use to first pool, nested queries (i.e. in a db_foreach,
# which is actually not recommended) use pool2 and so on. Make sure to
# set the "db_*" the variables with actual values on top of this file.
#
# NaviServer can have different pools connecting to different databases
# and even different database servers.  See
#
#     http://openacs.org/doc/tutorial-second-database
#
ns_section ns/server/$server/db {
    ns_param	pools              pool1,pool2,pool3
    ns_param	defaultpool        pool1
}
ns_section ns/db/pools {
    ns_param	pool1              "Pool 1"
    ns_param	pool2              "Pool 2"
    ns_param	pool3              "Pool 3"
}

ns_section ns/db/pool/pool1 {
    # ns_param	maxidle            0     ;# time interval for shut-down of idle connections; default: 5m
    # ns_param	maxopen            0     ;# time interval for maximum time of open connections; default: 60m
    # ns_param  checkinterval      5m    ;# check pools for stale handles in this interval
    ns_param	connections        15
    ns_param    LogMinDuration     10ms  ;# when SQL logging is on, log only statements above this duration
    ns_param	logsqlerrors       $debug
    if { $database eq "oracle" } {
        ns_param	driver             ora8
        ns_param	datasource         {}
        ns_param	user               $db_name
        ns_param	password           $db_password
    } else {
        ns_param	driver             postgres
        ns_param	datasource         ${db_host}:${db_port}:dbname=${db_name}
        ns_param	user               $db_user
        ns_param	password           $db_password
    }
}
#
# In case, you want to activate (more intense) SQL logging at runtime,
# consider the two commands (e.g. entered over ds/shell)
#
#    ns_logctl severity "Debug(sql)" on
#    ns_db logminduration pool1  10ms
#

ns_section ns/db/pool/pool2 {
    # ns_param	maxidle            0
    # ns_param	maxopen            0
    # ns_param  checkinterval      5m    ;# check pools for stale handles in this interval
    ns_param	connections        5
    ns_param    LogMinDuration     10ms  ;# when SQL logging is on, log only statements above this duration
    ns_param	logsqlerrors       $debug
    if { $database eq "oracle" } {
        ns_param	driver             ora8
        ns_param	datasource         {}
        ns_param	user               $db_name
        ns_param	password           $db_password
    } else {
        ns_param	driver             postgres
        ns_param	datasource         ${db_host}:${db_port}:dbname=${db_name}
        ns_param	user               $db_user
        ns_param	password           $db_password
    }
}

ns_section ns/db/pool/pool3 {
    # ns_param	maxidle            0
    # ns_param	maxopen            0
    # ns_param  checkinterval      5m    ;# check pools for stale handles in this interval
    ns_param	connections        5
    # ns_param  LogMinDuration     0ms  ;# when SQL logging is on, log only statements above this duration
    ns_param	logsqlerrors       $debug
    if { $database eq "oracle" } {
        ns_param	driver             ora8
        ns_param	datasource         {}
        ns_param	user               $db_name
        ns_param	password           $db_password
    } else {
        ns_param	driver             postgres
        ns_param	datasource         ${db_host}:${db_port}:dbname=${db_name}
        ns_param	user               $db_user
        ns_param	password           $db_password
    }
}


#---------------------------------------------------------------------
# Which modules should be loaded for $server?  Missing modules break
# the server, so don't uncomment modules unless they have been
# installed.

ns_section ns/server/$server/modules {
    ns_param	nslog		${bindir}/nslog
    ns_param	nsdb		${bindir}/nsdb
    ns_param	nsproxy		${bindir}/nsproxy

    #
    # Determine, if libthread is installed
    #
    set libthread [lindex [lsort [glob -nocomplain $homedir/lib/thread*/libthread*[info sharedlibextension]]] end]
    if {$libthread eq ""} {
        ns_log notice "No Tcl thread library installed in $homedir/lib/"
    } else {
        ns_param	libthread $libthread
        ns_log notice "Use Tcl thread library $libthread"
    }

    # authorize-gateway package requires dqd_utils
    # ns_param	dqd_utils dqd_utils[expr {int($tcl_version)}]

    # LDAP authentication
    # ns_param	nsldap             ${bindir}/nsldap

    # These modules aren't used in standard OpenACS installs
    # ns_param	nsperm             ${bindir}/nsperm
}



#
# nsproxy configuration
#
ns_section ns/server/$server/module/nsproxy {
    # ns_param	maxworkers         8
    # ns_param	sendtimeout        5s
    # ns_param	recvtimeout        5s
    # ns_param	waittimeout        100ms
    # ns_param	idletimeout        5m
    # ns_param	logminduration     1s
}

#
# nsstats configuration (global module)
#
# When installed under acs-subsite/www/admin/nsstats.tcl it is due to
# its /admin/ location safe from public access.
#
ns_section ns/module/nsstats {
    ns_param enabled  1
    ns_param user     ""
    ns_param password ""
    ns_param bglocks  {oacs:sched_procs}
}


#
# Sample letsencrypt configuration.
#
# To use this, it is necessary to install the NaviServer letsencrypt
# module first, uncomment the two "ns_param" lines, and provide your
# desired domain names.
#
ns_section "ns/server/${server}/modules" {
    #ns_param letsencrypt tcl
}
ns_section ns/server/${server}/module/letsencrypt {

    # Provide one or more domain names (latter for multi-domain SAN
    # certificates). These values are a default in case the domains
    # are not provided by other means (e.g. "letsencrypt.tcl").  In
    # case multiple NaviServer virtual hosts are in used, this
    # definition must be on the ${server}, which is used for
    # obtaining updates (e.g. main site) although it retrieves a
    # certificate for many subsites.

    #ns_param domains { openacs.org openacs.net fisheye.openacs.org cvs.openacs.org }
}



#ns_logctl severity Debug(ns:driver) on
#ns_logctl severity Debug(request) on
#ns_logctl severity Debug(task) on
#ns_logctl severity Debug(connchan) on
ns_logctl severity debug $debug
ns_logctl severity "Debug(sql)" $verboseSQL

#
# If you want to activate core dumps, one can use the following command
#
#ns_log notice "nsd.tcl: ns_rlimit coresize [ns_rlimit coresize unlimited]"

ns_log notice "nsd.tcl: using threadsafe tcl: [info exists tcl_platform(threaded)]"
ns_log notice "nsd.tcl: finished reading configuration file."
#+end_src

** :code:
rootfs/var/www/openacs/www/SYSTEM/openacs-test.tcl
:PROPERTIES:
:CUSTOM_ID: rootfs-var-www-openacs-www-system-openacs-test-tcl
:END:

#+begin_src tcl :shebang "" :tangle-mode (identity #o644)
ad_page_contract {

    This is called by server monitoring scripts, such as
    keepalive (see http://arsdigita.com/free-tools/keepalive.html)
    if it doesn't return "success" then they are supposed
    to kill the AOLserver.

    You can also use this with our Uptime monitoring system,
    described in Chapter 15 of http://photo.net/wtr/thebook/

    This tests total db connectivity of all 3 database pools.

    @cvs-id $Id: dbtest.tcl,v 1.2 2009/11/17 22:26:13 ryang Exp $
} { }


try {
    if {![ad_verify_install]} {
        ns_log notice "Installation is not complete"
    } else {
        db_foreach check_pool1 "select 1 from acs_objects limit 1" {
            db_foreach check_pool2 "select 1 from acs_objects limit 1" {
                db_1row check_pool3 "select 1 from acs_objects limit 1"
            }
        }
    }
} on error {errorMsg} {
    ns_log warning "monitoring: openacs-test runs into an error: $errorMsg"
    ns_return 500 text/plain "1"
} on ok {result} {
    ns_return 200 text/plain "0"
}
#+end_src
** rootfs/usr/local/ns/conf/install-oacs-core-config.xml :code:
:PROPERTIES:
:CUSTOM_ID: rootfs-usr-local-ns-conf-install-oacs-core-config-xml
:END:
#+begin_src tcl :shebang "" :tangle-mode (identity #o644)
<?xml version="1.0"?>

<!-- This must be moved to the OpenACS page root when making a release tarball -->

<application name="openacs" pretty-name="OpenACS" home="http://openacs.org/">

  <actions>
    <install package="openacs-bootstrap3-theme"/>

    <set-parameter package-key="acs-subsite" name="DefaultMaster" value="tabbed-master"/>
    <set-parameter package-key="acs-subsite" name="StreamingHead" value="tabbed-streaming-head"/>
    <set-parameter package-key="acs-subsite" name="ThemeKey" value="openacs_bootstrap3"/>

    <set-parameter package-key="acs-subsite" name="ResourceDir" value="/packages/openacs-bootstrap3-theme/resources"/>

    <set-parameter package-key="acs-subsite" name="ThemeCSS" value="{-href /resources/acs-subsite/site-master.css -media all -order 0}
                {-href urn:ad:css:bootstrap3 -media all -order 1}
                {-href /resources/openacs-bootstrap3-theme/css/main.css -media all -order 2}
                {-href /resources/openacs-bootstrap3-theme/css/color/grey.css -media all -order 3}
                {-href /resources/acs-templating/forms.css -media all -order 4}
                {-href /resources/acs-templating/lists.css -media all -order 5}"/>

    <set-parameter package-key="acs-subsite" name="ThemeJS" value="{-src urn:ad:js:jquery -order 1}
                {-src urn:ad:js:bootstrap3 -order 2}" />

<!-- We could mount automaticall additional packages; some packages need to be mounted, before configuration option can be added
    <mount package="..." mount-point="..." instance-name="..."/>
-->

    <!-- <set-parameter package-key="acs-templating" name="RichTextEditor" value="ckeditor4"/> -->

    <set-parameter package-key="acs-bootstrap-installer" name="post_installation_message" value="When the server restarts click <a href='/acs-admin'>here</a> to configure OpenACS"/>
  </actions>

</application>
#+end_src
** hook/build.sh :code:
:PROPERTIES:
:CUSTOM_ID: hook-build-sh
:END:

#+begin_src sh
# shellcheck disable=SC1091
set -a
source ../VERSIONS
set +a

IMAGE="${IMAGE:-${IMAGE_REPOSITORY}/${IMAGE_NAME}:${IMAGE_TAG}}"
IMAGE_LATEST="${IMAGE_LATEST:-${IMAGE_REPOSITORY}/${IMAGE_NAME}:latest}"
DOCKERFILE="${DOCKERFILE:-Dockerfile}"

docker buildx build \
    --no-cache \
    --build-arg BUILD_DATE="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
    --build-arg NS_IMAGE_REPOSITORY="${NS_IMAGE_REPOSITORY}" \
    --build-arg NS_IMAGE_NAME="${NS_IMAGE_NAME}" \
    --build-arg NS_IMAGE_TAG="${NS_IMAGE_TAG}" \
    --build-arg OACS_TAG="${OACS_TAG}" \
    --tag "${IMAGE}" \
    --tag "${IMAGE_LATEST}" \
    --file ../"${DOCKERFILE}" \
    ../.
#+end_src

** hook/push.sh :code:
:PROPERTIES:
:CUSTOM_ID: hook-push-sh
:END:
#+begin_src sh
# shellcheck disable=SC1091
set -a; source ../VERSIONS ; set +a;

# * Push docker images
IMAGE="${IMAGE:-${IMAGE_REPOSITORY}/${IMAGE_NAME}:${IMAGE_TAG}}"
IMAGE_LATEST="${IMAGE_LATEST:-${IMAGE_REPOSITORY}/${IMAGE_NAME}:latest}"

docker image tag "${IMAGE}" "${IMAGE}"
docker image tag "${IMAGE}" "${IMAGE_LATEST}"
docker image push "${IMAGE}"
docker image push "${IMAGE_LATEST}"
#+end_src

** docker-compose.yaml :code:
:PROPERTIES:
:CUSTOM_ID: docker-compose-yaml
:END:
#+begin_src yaml
version: '3.9'

services:
  openacs:
    image: "${OACS_REPOSITORY}/${OACS_IMAGE_NAME}:${OACS_IMAGE_TAG}"
    env_file:
      - .env
    volumes:
      - content:/var/www/openacs/content-repository-content-files
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - ${OACS_LISTEN_PORT}:${oacs_httpport}
    healthcheck:
      test: ["CMD-SHELL", "wget -qO - http://localhost:${oacs_httpport}/SYSTEM/openacs-test || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 2

  postgres:
    image: "${POSTGRES_REPOSITORY}:${POSTGRES_TAG}"
    restart: always
    env_file:
      - .env
    ports:
      - "5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PGUSER}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  db_data:
  content:
#+end_src
** .env :code:
:PROPERTIES:
:CUSTOM_ID: -env
:END:
#+begin_src sh :shebang "" :tangle-mode (identity #o644)
# * Common
TZ="${TZ:-UTC}"

# * Postgres
PGDATABASE="${PGDATABASE:-openacs}"
PGHOST="${PGHOST:-postgres}"
PGPASSWORD="${PGPASSWORD:-testing}"
PGPORT="${PGPORT:-5432}"
PGUSER="${PGUSER:-openacs}"
POSTGRES_DB="${PGDATABASE}"
POSTGRES_PASSWORD="${PGPASSWORD}"
POSTGRES_REPOSITORY="postgres"
POSTGRES_TAG="14.1-alpine"
POSTGRES_USER="${PGUSER}"

# * OpenACS
NS_CONF="${NS_CONF:-/usr/local/ns/conf/openacs-config.tcl}"
OACS_REPOSITORY="${OACS_REPOSITORY:-oupfiz5}"
OACS_IMAGE_NAME="${OACS_IMAGE_NAME:-openacs}"
OACS_IMAGE_TAG="${OACS_IMAGE_TAG:-oacs-5-10}"
OACS_LISTEN_PORT="${OACS_LISTEN_PORT:-8080}"
oacs_httpport='8000'
oacs_db_user="${PGUSER}"
oacs_db_passwod="${PGPASSWORD}"
oacs_db_name="${PGDATABASE}"
oacs_db_host="${PGHOST}"
oacs_db_port="${PGPORT}"
oacs_ipaddress='0.0.0.0'
#+end_src

* Tests :test:noexport:
:PROPERTIES:
:header-args:bats+:   :tangle (concat (file-name-directory (mapconcat 'identity (split-string  buffer-file-name "org/") "")) "/tests/" (nth 4 (org-heading-components)) )
:header-args:sh+:  :tangle (concat (file-name-directory (mapconcat 'identity (split-string  buffer-file-name "org/") "")) "/tests/" (nth 4 (org-heading-components)) )
:CUSTOM_ID: tests
:END:
** helpers.bash :test:
:PROPERTIES:
:CUSTOM_ID: helpers-bash
:END:
#+begin_src sh :shebang "" :results output pp :noweb strip-export :tangle-mode (identity #o644)
# * Load Add-ons
load '.bats-battery/bats-assert/load.bash'
load '.bats-battery/bats-file/load.bash'
load '.bats-battery/bats-support/load.bash'
#+end_src

** 01.shellchecks.bats :test:
:PROPERTIES:
:CUSTOM_ID: 01-shellchecks-bats
:END:
#+begin_src bats :results output pp :noweb strip-export :dir ../

setup() {
    targets=()
    while IFS=  read -r -d $'\0'; do
        targets+=("$REPLY")
    done < <(
        find \
            ../src/hook \
            ../src/builds \
            -type f ! -iname ".gitignore" \
            -print0
    )
}

@test "Check shell files" {
      run export LC_ALL=C.UTF-8; shellcheck "${targets[@]}"
      assert_success
}

@test "Check VERSIONS file" {
      run export LC_ALL=C.UTF-8; shellcheck --shell=sh --exclude=SC2034 ../src/VERSIONS
      assert_success
}

#+end_src

** 02.dockerfile_check.bats :test:
:PROPERTIES:
:CUSTOM_ID: 02-dockerfile-check-bats
:END:
#+begin_src bats :results output pp :noweb strip-export

@test "Check Dockerfile" {
      run docker run --rm -i -v "${PWD}/../src":/work --workdir=/work  hadolint/hadolint hadolint -f json Dockerfile
      assert_success
}

#+end_src

** 03.docker_image_check.bats :test:
:PROPERTIES:
:CUSTOM_ID: 03-docker-image-check-bats
:END:

#+begin_src bats :results output pp :noweb strip-export

setup() {
    . ../src/VERSIONS
    IMAGE="${IMAGE:-${IMAGE_REPOSITORY}/${IMAGE_NAME}:${IMAGE_TAG}}"

    VERSION=$(
        curl --silent "https://api.github.com/repos/goodwithtech/dockle/releases/latest" | \
            grep '"tag_name":' | \
            sed -E 's/.*"v([^"]+)".*/\1/' \
           )
}

@test "Check docker image" {
    run docker run --rm \
        -v /var/run/docker.sock:/var/run/docker.sock \
        -v "$(pwd)"/.dockleignore:/.dockleignore \
        goodwithtech/dockle:v"${VERSION}" \
        --exit-code 1 \
        --exit-level fatal \
        "${IMAGE}"
    assert_success
}
#+end_src

** 04.container_check.bats :test:
:PROPERTIES:
:CUSTOM_ID: 04-container-check-bats
:END:
#+begin_src bats :results output pp :noweb strip-export

setup() {
    . ../src/VERSIONS
    IMAGE="${IMAGE:-${IMAGE_REPOSITORY}/${IMAGE_NAME}:${IMAGE_TAG}}"
}

@test "Verify container run" {
    run docker run -itd \
     --restart always \
     --name="${CONTAINER_NAME}" \
     -p 127.0.0.1:8090:8080 \
     "${IMAGE}"
    assert_success
}

@test "Verify state status container - running" {
    sleep 5
    run docker inspect --format 'result={{ .State.Status }}' "${CONTAINER_NAME}"
    assert_success
    assert_output 'result=running'
}

@test "Verify state running container - true" {
    run docker inspect --format 'result={{ .State.Running }}' "${CONTAINER_NAME}"
    assert_success
    assert_output 'result=true'
}

@test "Verify state restarting container - false" {
    run docker inspect --format 'result={{ .State.Restarting }}' "${CONTAINER_NAME}"
    assert_success
    assert_output 'result=false'
}

@test "Verify state error container - <empty>" {
    run docker inspect --format 'result={{ .State.Error }}' "${CONTAINER_NAME}"
    assert_success
    assert_output 'result='
}

@test "Verify restart count container - 0" {
    run docker inspect --format 'result={{ .RestartCount }}' "${CONTAINER_NAME}"
    assert_success
    assert_output 'result=0'
}

# @test "Verify AppArmor Profile - if applicable" {
#       skip
#       run docker inspect --format 'AppArmorProfile={{ .AppArmorProfile }}' "${CONTAINER_NAME}"
#       assert_success
#       refute_output "AppArmorProfile=[]"
#       refute_output "AppArmorProfile="
#       refute_output "AppArmorProfile=<no value>"
# }

@test "Verify container stop" {
    run docker container stop "${CONTAINER_NAME}"
    assert_success
}

@test "Remove container" {
    run docker container rm "${CONTAINER_NAME}" || true
    assert_success
}

#+end_src

** shellcheck.sh :test:noexport:notangle:
:PROPERTIES:
:CUSTOM_ID: shellcheck-sh
:END:
#+begin_src sh :results output pp :noweb strip-export :tangle no
set -e

targets=()
while IFS=  read -r -d $'\0'; do
    targets+=("$REPLY")
done < <(
  find \
    ../src/rootfs/etc \
    ../src/hook \
    -type f \
    -print0
  )


echo "Shellcheck files"
LC_ALL=C.UTF-8 shellcheck "${targets[@]}"

# VERSION were exclude from main check (above)
# exclude warning https://github.com/koalaman/shellcheck/wiki/SC2034
echo "Shellcheck VERSION"
#LC_ALL=C.UTF-8 shellcheck --shell=sh --exclude=SC2034 VERSION

exit $?
#+end_src

** docker_image_check.sh :test:noexport:notangle:
:PROPERTIES:
:CUSTOM_ID: docker-image-check-sh
:END:
#+begin_src sh :results output pp :noweb strip-export :tangle no
set -e
IMAGE_NAME="${1:-oupfiz5/tcl-build:latest}"

# * Install dockle and check targets
# Pay attention: some checks are ignored using .dockleignore
VERSION=$(
    curl --silent "https://api.github.com/repos/goodwithtech/dockle/releases/latest" | \
        grep '"tag_name":' | \
        sed -E 's/.*"v([^"]+)".*/\1/' \
       ) && docker run --rm \
                       -v /var/run/docker.sock:/var/run/docker.sock \
                       -v "$(pwd)"/.dockleignore:/.dockleignore \
                       goodwithtech/dockle:v"${VERSION}" \
                       --exit-code 1 \
                       --exit-level fatal \
                       "${IMAGE_NAME}"
exit $?
#+end_src

** .dockleignore :test:
:PROPERTIES:
:CUSTOM_ID: -dockleignore
:END:
#+begin_src sh :shebang ""
# Use COPY instead of ADD in Dockerfile
CIS-DI-0009
# Use latest tag because to check the image inside only
DKL-DI-0006
# set root to default user because it will be use for next build
CIS-DI-0001
#+end_src
** dockerfile_check.sh :test:noexport:notangle:
:PROPERTIES:
:CUSTOM_ID: dockerfile-check-sh
:END:
#+begin_src sh :results output pp :noweb strip-export :tangle no
set -e

# * Get list of targets
targets=()
while IFS=  read -r -d $'\0'; do
    targets+=("$REPLY")
done < <(
  find \
     ../src/Dockerfile \
    -type f \
    -print0
  )

# * Pull hadolint and check targets
echo Test Dockerfile - $(date)
docker run --rm -i hadolint/hadolint < "${targets[@]}" && echo "Success"

exit $?
#+end_src
